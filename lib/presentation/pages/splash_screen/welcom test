import 'package:chewie/chewie.dart';
import 'package:flutter/cupertino.dart';
import 'package:carousel_slider/carousel_slider.dart';
import 'package:provider/provider.dart';
import 'package:sign_in_with_apple/sign_in_with_apple.dart';
import 'package:tuni/core/provider/login_provider.dart';
import 'package:video_player/video_player.dart';

class WelcomePage extends StatefulWidget {
  const WelcomePage({super.key});

  @override
  WelcomePageState createState() => WelcomePageState();
}

class WelcomePageState extends State<WelcomePage>
    with SingleTickerProviderStateMixin {
  List<String> videoPaths = [
    "https://firebasestorage.googleapis.com/v0/b/tunitest-e022d.appspot.com/o/Combo_videos%2Ftuni_ios_thumbnail_video.mp4?alt=media&token=c7c05c6c-f879-4280-89d1-4966835bfe4f"
  ];

  late List<VideoPlayerController> _videoControllers;
  late List<ChewieController> _chewieControllers;
  late CarouselController _carouselController;
  int _currentPage = 0;

  final TextEditingController phoneController = TextEditingController();
  String? errorMessage;
  final String countryCode = "+91";

  @override
  void initState() {
    super.initState();
    _carouselController = CarouselController();
    _initializeVideoControllers();
  }

  Future<void> _initializeVideoControllers() async {
    _videoControllers = [];
    _chewieControllers = [];
    for (String path in videoPaths) {
      try {
        Uri uri = Uri.parse(path);
        VideoPlayerController videoController;
        if (uri.isAbsolute && (uri.scheme == 'http' || uri.scheme == 'https')) {
          videoController = VideoPlayerController.networkUrl(uri);
        } else {
          videoController = VideoPlayerController.asset(path);
        }
        await videoController.initialize();
        _videoControllers.add(videoController);
        _chewieControllers.add(
          ChewieController(
            videoPlayerController: videoController,
            autoPlay: true,
            looping: true,
            allowFullScreen: true,
            allowMuting: false,
            showControlsOnInitialize: false,
            showOptions: false,
            autoInitialize: true,
            errorBuilder: (context, errorMessage) {
              debugPrint('Error: $errorMessage');
              return const Center(
                child: Text('Error playing video'),
              );
            },
          ),
        );
      } catch (e) {
        debugPrint('Failed to initialize video: $e');
      }
    }
    if (_videoControllers.isNotEmpty) {
      _videoControllers[_currentPage].play();
    }
    setState(() {});
  }

  @override
  void dispose() {
    for (var controller in _videoControllers) {
      controller.pause();
      controller.dispose();
    }
    for (var chewieController in _chewieControllers) {
      chewieController.pause();
      chewieController.dispose();
    }
    super.dispose();
  }

  void _onVideoTap(int index) {
    Navigator.push(
      context,
      CupertinoPageRoute(
        builder: (context) => CupertinoPageScaffold(
          child: Center(
            child: GestureDetector(
              onTap: () {
                Navigator.pop(context);
              },
              child: Chewie(
                controller: _chewieControllers[index],
              ),
            ),
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final userProvider = Provider.of<LoginProvider>(context);

    return CupertinoPageScaffold(
      child: Stack(
        children: <Widget>[
          if (_chewieControllers.isNotEmpty)
            CarouselSlider(
              items: _chewieControllers.map((controller) {
                int index = _chewieControllers.indexOf(controller);
                return GestureDetector(
                  onTap: () => _onVideoTap(index),
                  child: Chewie(
                    controller: controller,
                  ),
                );
              }).toList(),
              carouselController: _carouselController,
              options: CarouselOptions(
                autoPlay: false,
                onPageChanged: (index, reason) {
                  setState(() {
                    _currentPage = index;
                  });

                  for (var controller in _videoControllers) {
                    controller.pause();
                  }

                  _videoControllers[_currentPage].play();
                },
                height: double.maxFinite,
                aspectRatio: 1,
                enlargeCenterPage: true,
                disableCenter: true,
                viewportFraction: 1.5,
                pageSnapping: true,
                enableInfiniteScroll: false,
              ),
            ),
          Positioned(
            left: 0.0,
            right: 0.0,
            bottom: 0.0,
            top: 0.0,
            child: Padding(
              padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
              child:
                  Padding(
                padding: const EdgeInsets.only(left: 0.0, right: 0.0),
                child: Container(
                  decoration: const BoxDecoration(
                    gradient: LinearGradient(
                      colors: [
                        Color.fromRGBO(255, 255, 255, 0),
                        Color.fromRGBO(255, 255, 255, 0.4),
                        Color.fromRGBO(106, 84, 84, 0.0),
                        Color.fromRGBO(109, 101, 114, 0.0),
                        Color.fromRGBO(26, 15, 33, 1),
                        Color.fromRGBO(97, 8, 93, 1),
                      ],
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                    ),
                  ),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: <Widget>[
                      const SizedBox(height: 20.0),
                      Padding(
                        padding: const EdgeInsets.fromLTRB(20, 20, 20, 20),
                        child: Container(
                          decoration: const BoxDecoration(
                            color: CupertinoColors.white,
                            borderRadius: BorderRadius.all(Radius.circular(7)),
                          ),
                          child: Row(
                            children: [
                              Container(
                                height: 40,
                                width: 50,
                                decoration: const BoxDecoration(
                                  color: CupertinoColors.white,
                                  borderRadius:
                                      BorderRadius.all(Radius.circular(10)),
                                ),
                                child: const Center(child: Text("+91")),
                              ),
                              Container(
                                padding: const EdgeInsets.only(top: 20),
                                width: 1,
                                decoration: BoxDecoration(
                                  border: Border.all(
                                      color: CupertinoColors.inactiveGray),
                                ),
                              ),
                              const SizedBox(width: 10),
                              Expanded(
                                child: SizedBox(
                                  height: 40,
                                  child: CupertinoTextField(
                                    controller: phoneController,
                                    keyboardType: TextInputType.phone,
                                    placeholder: "Enter Your Phone Number",
                                    style: const TextStyle(
                                      fontWeight: FontWeight.bold,
                                      fontSize: 16.0,
                                    ),
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(7),
                                      color: CupertinoColors.white,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      if (errorMessage != null)
                        Text(
                          errorMessage!,
                          style: const TextStyle(
                            color: CupertinoColors.systemRed,
                          ),
                        ),
                      const SizedBox(height: 0),
                      CupertinoButton.filled(
                        padding: const EdgeInsets.symmetric(horizontal: 40),
                        onPressed: () async {
                          if (_validatePhoneNumber()) {
                            final phoneNumber =
                                countryCode + phoneController.text;
                            await userProvider.signInWithPhone(
                                phoneNumber, context);
                          }
                        },
                        child: userProvider.isLoading
                            ? const CupertinoActivityIndicator(
                                color: CupertinoColors.white)
                            : const Text(
                                "GET OTP",
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    letterSpacing: 1),
                              ),
                      ),
                      const SizedBox(height: 30),
                      SizedBox(
                        width: 250,
                        height: 40,
                        child: SignInWithAppleButton(
                          style: SignInWithAppleButtonStyle.whiteOutlined,
                          onPressed: () async {
                            await userProvider.signInWithApple(context);
                          },
                        ),
                      ),
                      const SizedBox(height: 10),
                      Container(
                        width: 250,
                        height: 40,
                        decoration: BoxDecoration(
                            color: CupertinoColors.white,
                            borderRadius: BorderRadius.circular(8)),
                        child: CupertinoButton(
                          padding: EdgeInsets.zero,
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Image.asset(
                                "Assets/logo/googleLogo.png",
                                height: 20,
                              ),
                              const SizedBox(width: 10),
                              const Text(
                                "Sign In With Google",
                                style: TextStyle(
                                    fontSize: 17, color: CupertinoColors.black),
                              )
                            ],
                          ),
                          onPressed: () async {
                            await userProvider.signInWithGoogle(context);
                          },
                        ),
                      ),
                      const SizedBox(height: 10),
                      CupertinoButton(
                        padding: EdgeInsets.zero,
                        onPressed: () async {
                          await userProvider.signInAnonymously(context);
                        },
                        child: const Text(
                          'Continue as Guest',
                          style: TextStyle(
                            color: CupertinoColors.white,
                            fontSize: 20.0,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                      const SizedBox(height: 50),
                    ],
                  ),
                ),
              ),
              // ),
            ),
          ),
        ],
      ),
    );
  }

  bool _validatePhoneNumber() {
    String phoneNumber = phoneController.text;
    if (phoneNumber.isEmpty) {
      setState(() {
        errorMessage = "Please enter a phone number.";
      });
      return false;
    }
    String phoneNumberDigits = phoneNumber.replaceAll(RegExp(r'\D'), '');
    if (phoneNumberDigits.length != 10) {
      setState(() {
        errorMessage = "Phone number must have 10 digits.";
      });
      return false;
    }
    return true;
  }
}